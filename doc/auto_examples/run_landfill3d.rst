
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/run_landfill3d.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_run_landfill3d.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_run_landfill3d.py:


Inversion of current source density apply to a roots imaging
------------------------------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 5-66


.. rst-class:: sphx-glr-script-out

.. code-block:: pytb

    Traceback (most recent call last):
      File "/home/ben/Documents/GitHub/icsd/examples/run_landfill3d.py", line 35, in <module>
        icsd3d_landfill.invert(show=True)
      File "/home/ben/Documents/GitHub/icsd/icsd/icsd3d.py", line 528, in invert
        ax, f = self.run_single(show=show)
      File "/home/ben/Documents/GitHub/icsd/icsd/icsd3d.py", line 377, in run_single
        plt.close(f)
      File "/home/ben/miniconda3/lib/python3.9/site-packages/matplotlib/pyplot.py", line 952, in close
        raise TypeError("close() argument must be a Figure, an int, a string, "
    TypeError: close() argument must be a Figure, an int, a string, or None, not <class 'tuple'>






|

.. code-block:: default

    import os
    import matplotlib.pyplot as plt

    # -----------------------------------#
    # Exemple Landfill
    # -----------------------------------#
    path2files="./Landfill_3d/"

    from icsd.icsd3d import iCSD3d as i3d 
    from icsd.plotters import mpl_plot
    import numpy as np


    coords_elecs = np.loadtxt(path2files+'coords_elecs.txt')[:-3,:]
    len(coords_elecs)
    mpl_plot.showObs2d(path2files,coords_elecs,
                       filename='solution.data')

    icsd3d_landfill=i3d(dirName=path2files)   
    icsd3d_landfill.regMesh='strc'
    icsd3d_landfill.type='3d'
    icsd3d_landfill.obs_err='sqrt' # choose between constant weight and w = 1/sqrt(abs(obs))
    icsd3d_landfill.wr=1 #weight regularization
    icsd3d_landfill.alphaSxy=False
    icsd3d_landfill.x0_prior=False
    icsd3d_landfill.x0_ini_guess=False # initial guess

    
    icsd3d_landfill.createSurvey(fname_obs='solution.data',fname_sim='Green.data')

    icsd3d_landfill.invert(show=True)

    # Unconstrainsted current source densities inversion
    icsd3d_landfill.invert(wr=1,x0_prior=False)

    icsd3d_landfill.invert()
    # Estimate initial model
    icsd3d_landfill.estimateM0(method_m0='F1', show=True)

    # Constrainsted current source densities inversion
    icsd3d_landfill.invert(regMesh='strc',wr=1,x0_prior=False)
    # icsd3d_landfill.invertregMesh='strc',x0_prior=True)


    import matplotlib.pyplot as plt

    from mpl_toolkits.mplot3d import Axes3D


    fig = plt.figure()
    ax=fig.gca(projection='3d')
    icsd3d_landfill.showResults(ax=ax,
                                mesh='fwd_mesh_landfill.vtk')
    plt.show()









.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  2.176 seconds)


.. _sphx_glr_download_auto_examples_run_landfill3d.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: run_landfill3d.py <run_landfill3d.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: run_landfill3d.ipynb <run_landfill3d.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
